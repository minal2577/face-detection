import cv2
import os

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

cap = cv2.VideoCapture(0)
output_directory = r'C:\output_faces'
os.makedirs(output_directory, exist_ok=True)

while True:
    ret, frame = cap.read()

    smooth_frame = cv2.bilateralFilter(frame, d=9, sigmaColor=75, sigmaSpace=75)
    gray_frame = cv2.cvtColor(smooth_frame, cv2.COLOR_BGR2GRAY)
    gray_frame = cv2.medianBlur(gray_frame, 5)
    edges = cv2.adaptiveThreshold(gray_frame, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)
    edges = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
    cartoon_frame = cv2.bitwise_and(smooth_frame, edges)
    cv2.imshow('Cartoon Effect', cartoon_frame)
    faces = face_cascade.detectMultiScale(gray_frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    for i, (x, y, w, h) in enumerate(faces):
        face_roi = cartoon_frame[y:y+h, x:x+w]

        face_filename = os.path.join(output_directory, f'face_{i}.jpg')
        cv2.imwrite(face_filename, face_roi)

        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

    num_faces = len(faces)
    

    cv2.putText(frame, f'Number of faces: {num_faces}', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow('Live Face Detection', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

img = cv2.imread(r'C:')
type(img)
from skimage import io 
io.imshow(img)
        
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
io.imshow(img)

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray = cv2.medianBlur(gray, 5)
edges = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)
io.imshow(edges)
color = cv2.bilateralFilter(img, 9, 250, 250)
cartoon = cv2.bitwise_and(color, color, mask=edges)
io.imshow(cartoon)